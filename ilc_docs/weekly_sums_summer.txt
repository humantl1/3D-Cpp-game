Tim Benton
3D Game Architecture II
Summer, 2021
Weekly Summaries

Week 1 : Project Setup
- Switch to SDL
  - Implement SDL in Linux to understand command line commands
    - libsdl2-dev : main SDL library
    - libsdl2-image-dev : image display library
    - libsdl2-ttf-dev : true type font library
    - libsdl2-mixer-dev : sound library
    - liblua5.3-dev : LUA, for scripting language (5.3 for max compatibility)
  - Setup Linux virtual machine for testing game and libraries manually (outside of IDE)
  - Research Make for use manually compiling in Linux
    - Create Make file to manually include directories, clean executable, and output named executable
  - Research git forking to fork a branch of current game to transition from GLFW to SDL
    - Setup alternate branch for SDL integration
  - Including SDL and Lua took a lot of internet troubleshooting to successfully incorporate
    - Simultaneously developing in Linux and Windows illuminated the contrast between
      development differences between the two. Linux took minutes to implement, Windows took half a day.

Week 2 : Game Loop Prototype
- Implement make and compile_commands.json to improve development control and functionality
- Research safe memory allocation and deletion
  - implement unique pointers to avoid memory leaks
- Implement SDL window functionality
  - Transfer window display handling from GLFW to SDL
  - Transition window code
- Research game loop implementations
  - In Linux, prototype basic game:
    - initialization : initialize window and SDL functionality
    - input : receive and record input via SDL
    - render functionality : render 2d graphics via SDL
    - time step : fix delta time to specified frames per second

Week 3 : Game Loop Implementation
- Move core functionality to discreet classes
  -  Input
  -  SDL_window
  -  Update
- Fix time step in 3D game code
  - Implement cpu independent Delta Time
  - Decouple desired frames per second from functionality via a separate "constant" class
  - Sync rendering buffer output with Delta Time
- Begin more robust SDL input implementation, replacing ad hoc GLFW input functionality
  - Begin attempt to abstract input functionality from specific input implementation
    - i.e. classes that receive input are uneffected by changes in input implementation
    - This will require significant engineering, as an event system would be the most robust
        way to achieve this
- Begin researching potential event system architectures

Week 4 :
- Plan overall architecture of game:
  - Entity-Component relationship
    - entities are composed of components, e.g. transform, collider, etc.
    - Game: holds entity manager
      - Entity Manager: list of entities, adds and gets entities, updates and renders entities
        - Entity class : list of components, adds components, updates and renders
          - Component class : tracks owner entity, virtual update & render
            - individual component classes : component specific data members,
              implement override update and render for themselves
   - this will require significant reworking of existing rendering engine code
     - the rendering engine was designed for testing rendering processes, not for robust game code
       so much of the none-rendering code will need to be updated or discarded
- Prototype entity/componenet system in linux
  - create entity manager class to hold all entities
  - create entity class to represent a "game object"
  - create a componenet virtual class as a blueprint for chunks of functionality that compose entities
  - create a transform_component class as a first full example of entity-component system
